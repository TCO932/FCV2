# Form implementation generated from reading ui file 'qtUI/machineWidget.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from dataclasses import dataclass
from PyQt6 import QtCore, QtGui, QtWidgets
from classes import EffectedMachine, Machine, Module

from data import MACHINES, MODULES


class MachineWidget(QtWidgets.QWidget):
    calculateClicked = QtCore.pyqtSignal(EffectedMachine)

    def __init__(self):
        super().__init__()
        self.setupUi()

        # TODO self.machine_options = list(filter(lambda key: key == itemMeta.machineType, ASSENBLING_MACHINES.keys()))
        for machine in MACHINES.values():

            self.selectMachine.addItem(machine.getFormattedName(), machine) 

        for module in MODULES.values():
            self.selectModule.addItem(module.getFormattedName(), module) 

        self.selectMachine.currentIndexChanged.connect(self.on_machine_changed)
        self.selectModule.currentIndexChanged.connect(self.on_module_changed)

        # self.numberOfModulesSpinBox.valueChanged.connect(lambda value: value)
        # self.numberOfBeaconsSpinBox.valueChanged.connect(self.on_module_changed)
        
        self.calculateButton.pressed.connect(self.on_calculate_button)


    def setModel(self, effectedMachine: EffectedMachine):
        self.model = effectedMachine

        self.select_machine(effectedMachine)

        if effectedMachine.modules:
            moduleName, modulesNumber = next(iter(effectedMachine.modules.items())) #TODO добавить поддержку разных модулей
            self.select_module(moduleName)
            self.numberOfModulesSpinBox.setValue(modulesNumber)

        self.numberOfBeaconsSpinBox.setValue(effectedMachine.beaconsNumber)

    def select_machine(self, machine: Machine):
        for index in range(self.selectMachine.count()):
            if self.selectMachine.itemData(index).name == machine.name:
                self.selectMachine.setCurrentIndex(index)
                return

    def select_module(self, module: Module): #TODO добавить поддержку разных модулей
        for index in range(self.selectModule.count()):
            if self.selectModule.itemData(index) == module:
                self.selectModule.setCurrentIndex(index)
                return

    def on_machine_changed(self, index):
        machine: Machine = self.selectMachine.itemData(index)
        self.numberOfModulesSpinBox.setRange(0, machine.slots)
        self.numberOfBeaconsSpinBox.setRange(0, machine.maxBeacons)
        print(f"Выбранная машина: {machine}")

    def on_module_changed(self, index): #TODO добавить поддержку разных модулей
        module: Module = self.selectModule.itemData(index)
        self.model.modules.update({module: 0})
        print(f"Выбранный модуль: {module}")

    def on_modules_number_changed(self, value): #TODO добавить поддержку разных модулей
        module = next(iter(self.model.modules.keys())) 
        self.model.modules.update({module: value})

    def on_beacons_number_changed(self, value):
        self.model.beaconsNumber = value


    def on_calculate_button(self):
        effectedMachine = EffectedMachine.fromMachine(
            self.selectMachine.currentData(),
            modules={self.selectModule.currentData(): self.numberOfModulesSpinBox.value()},
            beaconsNumber=self.numberOfBeaconsSpinBox.value()
        )
        self.calculateClicked.emit(effectedMachine)

    def setupUi(self):
        self.setObjectName("MachineWidget")
        self.resize(250, 300)
        self.verticalLayout = QtWidgets.QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")
        self.selectMachineLabel = QtWidgets.QLabel(parent=self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.selectMachineLabel.sizePolicy().hasHeightForWidth())
        self.selectMachineLabel.setSizePolicy(sizePolicy)
        self.selectMachineLabel.setObjectName("selectMachineLabel")
        self.verticalLayout.addWidget(self.selectMachineLabel)
        self.selectMachine = QtWidgets.QComboBox(parent=self)
        self.selectMachine.setObjectName("selectMachine")
        self.verticalLayout.addWidget(self.selectMachine)
        self.selectModuleLabel = QtWidgets.QLabel(parent=self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.selectModuleLabel.sizePolicy().hasHeightForWidth())
        self.selectModuleLabel.setSizePolicy(sizePolicy)
        self.selectModuleLabel.setObjectName("selectModuleLabel")
        self.verticalLayout.addWidget(self.selectModuleLabel)
        self.selectModule = QtWidgets.QComboBox(parent=self)
        self.selectModule.setObjectName("selectModule")
        self.verticalLayout.addWidget(self.selectModule)
        self.numberOfModulesLabel = QtWidgets.QLabel(parent=self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numberOfModulesLabel.sizePolicy().hasHeightForWidth())
        self.numberOfModulesLabel.setSizePolicy(sizePolicy)
        self.numberOfModulesLabel.setObjectName("numberOfModulesLabel")
        self.verticalLayout.addWidget(self.numberOfModulesLabel)
        self.numberOfModulesSpinBox = QtWidgets.QSpinBox(parent=self)
        self.numberOfModulesSpinBox.setObjectName("numberOfModulesSpinBox")
        self.verticalLayout.addWidget(self.numberOfModulesSpinBox)
        self.numberOfBeaconsLabel = QtWidgets.QLabel(parent=self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numberOfBeaconsLabel.sizePolicy().hasHeightForWidth())
        self.numberOfBeaconsLabel.setSizePolicy(sizePolicy)
        self.numberOfBeaconsLabel.setObjectName("numberOfBeaconsLabel")
        self.verticalLayout.addWidget(self.numberOfBeaconsLabel)
        self.numberOfBeaconsSpinBox = QtWidgets.QSpinBox(parent=self)
        self.numberOfBeaconsSpinBox.setObjectName("numberOfBeaconsSpinBox")
        self.verticalLayout.addWidget(self.numberOfBeaconsSpinBox)
        self.calculateButton = QtWidgets.QPushButton(parent=self)
        self.calculateButton.setObjectName("calculateButton")
        self.verticalLayout.addWidget(self.calculateButton)

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self, MachineWidget: QtWidgets.QWidget):
        _translate = QtCore.QCoreApplication.translate
        MachineWidget.setWindowTitle(_translate("MachineWidget", "Form"))
        self.selectMachineLabel.setText(_translate("MachineWidget", "Machine:"))
        self.selectModuleLabel.setText(_translate("MachineWidget", "Module:"))
        self.numberOfModulesLabel.setText(_translate("MachineWidget", "Number of Modules:"))
        self.numberOfBeaconsLabel.setText(_translate("MachineWidget", "Number of Beacons"))
        self.calculateButton.setText(_translate("MachineWidget", "Calculate"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    machineWidget = MachineWidget()
    machineWidget.show()
    sys.exit(app.exec())
